<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprPlayer</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>active = 1  //this will indicate where this instance of objPlayer is currently being controlled by the actual player
//surface = ;
/*
surface_set_target(surface);
draw_clear_alpha(0, 0);
surface_reset_target();
*/
//variable_local_set(surface,surface_create(room_width,room_height));

/////////////////////
runspeed = 0
maxrunspeed = 6 //maximum for this can be 7 or less other wise 45 degree 
//inclines cannot be traversed. This is because of the collision
//checking for slopes the max -y check is place_empty(x+runspeed,y-7)
//if you need this to be higher than 7 just add more iterations of the
//collision checking until i come up with a better solution.
vertspeed = 0
maxfallspeed = 5
jumpspeed = -5
dir = 0
hspd = 0
vspd = 0
face = -1
spd = 0
rinc = .25
vinca = .25
vincd = .25
image_speed = 0
status = 0
canshoot = 5
//timelord1 = surface_create(room_width,room_height);
refresh=0;
points = 0;
historyCount = 0;
bday = -1;
dday = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if bday = -1 {
    bday = objTimeLord.gloStep;
}
if active = 1
{
    if objTimeLord.active = 1 {
        historyCount = objTimeLord.gloStep;
        hist[objTimeLord.gloStep,1] = x;
        hist[objTimeLord.gloStep,2] = y;
        hist[objTimeLord.gloStep,3] = 1;
    }

    if objTimeLord.active = 0 {
        if dday = -1 {
            dday = objTimeLord.gloStep;
        }
        if objTimeLord.gloStep &gt;= bday  &amp;&amp; objTimeLord.gloStep &lt;= dday{
            if hist[objTimeLord.gloStep,3] = 1 {
                x = hist[objTimeLord.gloStep,1];
                y = hist[objTimeLord.gloStep,2];
            } else {
                hist[objTimeLord.gloStep, 3] = 0;
            }
        }
    }
}

if mouse_check_button_released(mb_left){
    active = 0
}

if historyCount &lt; objTimeLord.gloStep {
    visible = false;
} else {
    visible = true;
}

if objTimeLord.gloStep &gt;= bday  &amp;&amp; objTimeLord.gloStep &lt;= dday {
    if hist[objTimeLord.gloStep,3] = 1 {
        x = hist[objTimeLord.gloStep,1]
        y = hist[objTimeLord.gloStep,2]
    }
};


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//*****stand ins for keyboard checking*****///////////////
    keypressW = keyboard_check_pressed(ord('W'));       //
    keypressA = keyboard_check_pressed(ord('A'));       //
    //keypressS = keyboard_check_pressed(ord('S'));     //
    keypressD = keyboard_check_pressed(ord('D'));       //
    keyreleaseW = keyboard_check_released(ord('W'));    //
    keyreleaseA = keyboard_check_released(ord('A'));    //
    //keyreleaseS = keyboard_check_released(ord('S'));  //
    keyreleaseD = keyboard_check_released(ord('D'));    //
    keycheckW = keyboard_check(ord('W'));               //
    keycheckA = keyboard_check(ord('A'));               //
    //keycheckS = keyboard_check(ord('S'));             //
    keycheckD = keyboard_check(ord('D'));               //
//////////////////////////////////////////////////////////

if active = 1
    {
        if objTimeLord.active = 1
            {
        
            
        //////pacman teleporting//
            if x&gt;room_width     //
            x = 0;              //
            if x&lt;0              //
            x = room_width;     //
            if y&gt;room_height    //
            y = 0;              //
            if y&lt;0              //
            y = room_height;    //
        //////////////////////////
        
        //////////////////////////////////
        if keyreleaseA-keyreleaseD !=0  //
        runspeed = 0;                   //
        //////////////////////////////////
        
        //////////////////////////////////
        if place_free(x,y+1)            //
            {                           //
                maxrunspeed = 2;        //
                if runspeed&gt;maxrunspeed //
                runspeed = maxrunspeed  //
            }else{                      //
                maxrunspeed = 2         //
            }                           //
        ;                               //
        //////////////////////////////////
        
        //////////////////////
        if keypressA        //
            runspeed = 0    //
        ;                   //
        //////////////////////
        if keypressD        //
           runspeed = 0     //
        ;                   //
        //////////////////////
        
        if keypressW
            {
                if !place_free(x,y+1)
                    {
                        if place_free(x,y+jumpspeed)
                        vertspeed = jumpspeed
                    }
            }
        ;
        
        if keyreleaseW
            {
                if place_free(x,y+1)
                    {
                        if round(vertspeed)&lt;0
                        vertspeed = 0
                        else
                        vertspeed = round(vertspeed)
                    }
            }
        ;
        if !keycheckW
            {
                if !place_free(x,y+1)
                vertspeed = 0
            }
        ;
        
        
        
        if keycheckA-keycheckD = 1
            {
                {
                    if runspeed&lt;maxrunspeed
                    runspeed +=rinc;
                }
                {
                    if place_free(x-(round(runspeed)+rinc),y)
                    x-=round(runspeed)
                }
            }
        ;
                            
        if keycheckD-keycheckA = 1
            {
                {
                    if runspeed&lt;maxrunspeed
                    runspeed +=rinc
                }
                {
                    if place_free(x+(round(runspeed)+rinc),y)
                    x+=round(runspeed)
                }
            }
        ;
        
        if keycheckW //if jump is pressed
            {
                if round(vertspeed)&lt;maxfallspeed //and if you have not yet reached maximum velocity
                    {
                        if (yprevious-y)&gt;0//if you are ascending
                        vertspeed+=vinca //ascend
                        else
                        vertspeed+=vincd//if not, descend
                    }
                    {
                        if place_free(x,y+round(vertspeed)) 
                        y+=round(vertspeed)
                        else
                        if !place_free(x,y+(abs(round(vertspeed))))
                            {
                                move_contact_solid(270,y-yprevious)
                                vertspeed = 0
                            }
                        if !place_free(x,y-(abs(round(vertspeed))))
                        move_contact_solid(90,y-yprevious)
                    }
                        if !place_free(x,y-1)
                    {
                        if round(vertspeed)&lt;0
                        vertspeed = 0
                    }
            }
        }
    }
;
        
if !keycheckW
    {
        if !mouse_check_button(mb_left)
            {
                            {//////////////////////
                    hist[objTimeLord.gloStep,1] = x
                    hist[objTimeLord.gloStep,2] = y
                    //hist[objTimeLord.gloStep,3] = 1
                }//////////////////////////////////
                if place_free(x,y+round(vertspeed)+1)
                    {
                        if round(vertspeed)&lt;maxfallspeed
                        vertspeed +=vincd
                            {
                                y+=round(vertspeed)
                            }
                    }
                else
                move_contact_solid(270,5)
            } 
    }
;

/////////////////////////////////////// to prevent clipping ^_^
        if !place_free(x+1,y)       //
        move_contact_solid(0,5);    //
        if !place_free(x-1,y)       //
        move_contact_solid(180,5);  //
        if !place_free(x,y+1)       //
        move_contact_solid(270,5);  //
//////////////////////////////////////
//////////////////////////////////////////////////
dir = point_direction(xprevious,yprevious,x,y); // the direction you are traveling where the positive x axis is 0 degrees and the negative is 180
hspd = x-xprevious;                             // your lateral speed
vspd = y-yprevious;                             // your longitudinal speed
spd = point_distance(x,y,xprevious,yprevious);  // your sqrt(speed hspd*hspd + vsp*vsp)
//////////////////////////////////////////////////
if mouse_x&gt;x    //
face = 1        //
else            //
face = -1;      //
//////////////////

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
